---
include:
  - project: invenia/gitlab-ci-helper
    file: /templates/python.yml
  - project: invenia/gitlab-ci-helper
    file: /templates/py-check.yml
  - project: invenia/gitlab-ci-helper
    file: /templates/teardown.yml

stages:
  - setup
  - test
  - teardown
  - deploy

variables:
  STACK_NAME_PREFIX: sandbox-lambdalayers
  AWS_DEFAULT_REGION: us-east-1
  TOX_TESTENV_PASSENV: AWS_DEFAULT_REGION STACKNAME AWS_SHARED_CREDENTIALS_FILE AWS_PROFILE
  AMAZON_LINUX_IMAGE: amazonlinux:2
  # Force Docker authentication to be isolated to a pipeline
  DOCKER_CONFIG: $CI_PROJECT_DIR/.docker

.setup: &setup |
  echo "$common_functions" > common && source common

# Variables that require shell execution or depend on a variable that does
.runtime_variables: &runtime_variables
  |
  # Declare runtime variables
  STACK_NAME=$(stack_name $STACK_NAME_PREFIX)
  ACCOUNT_ID=$(aws_account_id)

.install_cred_helper: &install_cred_helper
  |
  curl -sS -o julia-ci https://gitlab.invenia.ca/invenia/gitlab-ci-helper/raw/master/julia-ci
  chmod +x julia-ci
  ./julia-ci install-cred-helper

.docker_test_3: &docker_test_3
  stage: test
  tags:
    - amzn2
    - docker-build
  before_script:
    - *setup
    - enter_python_venv
    - *runtime_variables
    - install_cloudspy
    - pip install tox
    - docker --version
  extends: .save_test_coverage

"Setup Environment":
  stage: setup
  except:
    - tags
    - master
    - /^.+\/.*master$/  # e.g. jh/validate-master
  when: always
  environment:
    name: branch/$CI_COMMIT_REF_SLUG
    on_stop: "Delete Environment"
  script:
    - echo "Setting up environment"

"Create Stack":
  stage: setup
  tags:
    - docker-ci
    - ci-account
  image: $AMAZON_LINUX_IMAGE
  before_script:
    - *setup
    - *runtime_variables
    - yum -y update
    - install_awscli
    - install_cloudspy
  script:
    - aws cloudformation validate-template --template-body file://tests/stack.yml
    - |
      aws-deploy-stack \
        --role-arn arn:aws:iam::${ACCOUNT_ID}:role/CloudFormationAdmin \
        --stack-name $STACK_NAME \
        --template-file ./tests/stack.yml \
        --wait \
        --params CIRoleArn=arn:aws:iam::${ACCOUNT_ID}:role/GitLabCIRunnerRole

"Test Python 3 (Offline)":
  extends: .docker_test_3
  needs:
    - Code Format Check
  script:
    - tox -re py3-offline

"Test Python 3 (Online)":
  extends: .docker_test_3
  script:
    - assume_test_role
    - tox -re py3-online

"Upload to Private PyPi":
  extends: .upload_to_private_pypi

.delete: &delete
  tags:
    - docker-ci
    - ci-account
  image: $AMAZON_LINUX_IMAGE
  before_script:
    - *setup
    - *runtime_variables
    - install_awscli
    - install_cloudspy
    - assume_test_role
  script:
    - eval $(aws-stack-outputs $STACKNAME)
    - unset AWS_PROFILE  # Switch to back to CI runner role
    - |
      aws cloudformation delete-stack \
        --role-arn arn:aws:iam::${ACCOUNT_ID}:role/CloudFormationAdmin \
        --stack-name $STACK_NAME
    - aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME

"Delete Environment":
  stage: teardown
  except:
    - tags
    - master
    - /^.+\/.*master$/
  when: manual
  environment:
    name: branch/$CI_COMMIT_REF_SLUG
    action: stop
  dependencies:
    - "Create Stack"
  variables:
    GIT_STRATEGY: none  # Avoid checking out a branch after deletion
  <<: *delete

"Delete Stack":
  stage: teardown
  only:
    - tags
    - master
    - /^.+\/.*master$/
  when: always
  <<: *delete
